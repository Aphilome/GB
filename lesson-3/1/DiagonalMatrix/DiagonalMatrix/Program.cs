using System;

namespace DiagonalMatrix
{
    class Program
    {
        static void PrintMatrix(char[,] matrix, bool isMainDiagonal)
        {
            for (byte i = 0; i < matrix.GetLength(0); i++)
            {
                for (byte j = 0; j < matrix.GetLength(1); j++)
                {
                    if (isMainDiagonal && i == j || !isMainDiagonal && i + j == matrix.GetLength(0) - 1)
                        Console.Write($"{matrix[i, j], 3}");
                    else
                        Console.Write($"{' ', 3}");
                }
                Console.WriteLine();
            }
            Console.WriteLine();
        }
        
        static void Main()
        {
            char[,] degradationMatrix =
            {
                {'d', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', 'r', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', 't', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.', 'o', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'n'},
            };
            
            char[,] evolutionMatrix =
            {
                {'.', '.', '.', '.', '.', '.', '.', '.', 'n'},
                {'.', '.', '.', '.', '.', '.', '.', 'o', '.'},
                {'.', '.', '.', '.', '.', '.', 'i', '.', '.'},
                {'.', '.', '.', '.', '.', 't', '.', '.', '.'},
                {'.', '.', '.', '.', 'u', '.', '.', '.', '.'},
                {'.', '.', '.', 'l', '.', '.', '.', '.', '.'},
                {'.', '.', 'o', '.', '.', '.', '.', '.', '.'},
                {'.', 'v', '.', '.', '.', '.', '.', '.', '.'},
                {'e', '.', '.', '.', '.', '.', '.', '.', '.'}
            };

            PrintMatrix(degradationMatrix, true);
            PrintMatrix(evolutionMatrix, false);
        }
    }
}